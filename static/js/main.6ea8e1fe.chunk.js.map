{"version":3,"sources":["index.tsx"],"names":["Square","props","className","onClick","value","Board","renderSquare","i","squares","calculateWinner","lines","length","a","b","c","ReactDOM","render","React","useState","xIsNext","setXIsNext","stepNumber","setStepNumber","Array","fill","history","setHistory","current","console","log","status","winner","moves","map","step","move","desc","key","jumpTo","newHistory","slice","concat","handleClick","document","getElementById"],"mappings":"yNAWMA,G,MAAgC,SAAAC,GACpC,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,SAUPC,EAA8B,SAAAJ,GAClC,IAAMK,EAAe,SAACC,GACpB,OAAO,kBAACP,EAAD,CAAQI,MAAOH,EAAMO,QAAQD,GAAIJ,QAAS,kBAAMF,EAAME,QAAQI,OAGvE,OACE,6BACE,yBAAKL,UAAU,aACZI,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKJ,UAAU,aACZI,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKJ,UAAU,aACZI,EAAa,GACbA,EAAa,GACbA,EAAa,MAQhBG,EAAkB,SAACD,GAWvB,IAVA,IAAME,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAH,EAAI,EAAGA,EAAIG,EAAMC,OAAQJ,IAAK,CAAC,IAAD,cACnBG,EAAMH,GADa,GAC9BK,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GACpE,OAAON,EAAQI,GAGnB,OAAO,MAsETG,IAASC,OAAO,mBAnEH,WAAO,IAAD,EACaC,IAAMC,UAAkB,GADrC,mBACVC,EADU,KACDC,EADC,OAEmBH,IAAMC,SAAiB,GAF1C,mBAEVG,EAFU,KAEEC,EAFF,OAGaL,IAAMC,SAAuC,CACzE,CACEV,QAASe,MAAM,GAAGC,KAAK,SALV,mBAGVC,EAHU,KAGDC,EAHC,KAkCXC,EAAUF,EAAQJ,IAAeI,EAAQ,GAC/CG,QAAQC,IAAI,UAAWF,EAASF,EAASJ,GACzC,IAWIS,EAXEC,EAAStB,EAAgBkB,EAAQnB,SAEjCwB,EAAQP,EAAQQ,KAAI,SAACC,EAAMC,GAC/B,IAAMC,EAAOD,EAAO,eAAiBA,EAAO,mBAC5C,OACE,wBAAIE,IAAKF,GACP,4BAAQhC,QAAS,kBAbR,SAAC+B,GACdZ,EAAcY,GACdd,EAAYc,EAAO,IAAO,GAWCI,CAAOH,KAAQC,OAY5C,OALEN,EADEC,EACO,WAAaA,EAEb,iBAAmBZ,EAAU,IAAM,KAI5C,yBAAKjB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,CAAOG,QAASmB,EAAQnB,QAASL,QAAS,SAAAI,GAAC,OAhD7B,SAACA,GACnB,IAAMgC,EAAad,EAAQe,MAAM,EAAGnB,EAAa,GACjDO,QAAQC,IAAI,UAAWU,GACvB,IACM/B,EADU+B,EAAWA,EAAW5B,OAAS,GACvBH,QAAQgC,QAC5B/B,EAAgBD,IAAYA,EAAQD,KAGxCC,EAAQD,GAAKY,EAAU,IAAM,IAC7BO,EACEa,EAAWE,OAAO,CAChB,CACEjC,QAASA,MAIfc,EAAcG,EAAQd,QACtBS,GAAYD,IA+BuCuB,CAAYnC,OAE7D,yBAAKL,UAAU,aACb,6BAAM4B,GACN,4BAAKE,OAMG,MAAUW,SAASC,eAAe,W","file":"static/js/main.6ea8e1fe.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\ntype SquareValue = \"X\" | \"O\" | null;\n\ninterface SquareProps {\n  onClick(): void;\n  value: SquareValue;\n}\n\nconst Square: React.FC<SquareProps> = props => {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n};\n\ninterface BoardProps {\n  onClick(i: number): void;\n  squares: SquareValue[];\n}\n\nconst Board: React.FC<BoardProps> = props => {\n  const renderSquare = (i: number) => {\n    return <Square value={props.squares[i]} onClick={() => props.onClick(i)} />;\n  };\n\n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n};\n\ninterface GameProps {}\n\nconst calculateWinner = (squares: SquareValue[]): SquareValue => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n};\n\nconst Game = () => {\n  const [xIsNext, setXIsNext] = React.useState<boolean>(true);\n  const [stepNumber, setStepNumber] = React.useState<number>(0);\n  const [history, setHistory] = React.useState<{ squares: SquareValue[] }[]>([\n    {\n      squares: Array(9).fill(null)\n    }\n  ]);\n\n  const handleClick = (i: number): void => {\n    const newHistory = history.slice(0, stepNumber + 1);\n    console.log('history', newHistory)\n    const current = newHistory[newHistory.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = xIsNext ? \"X\" : \"O\";\n    setHistory(\n      newHistory.concat([\n        {\n          squares: squares\n        }\n      ])\n    );\n    setStepNumber(history.length);\n    setXIsNext(!xIsNext);\n  };\n\n  const jumpTo = (step: number): void => {\n    setStepNumber(step);\n    setXIsNext((step % 2) === 0);\n  };\n\n  const current = history[stepNumber] || history[0];\n  console.log('current', current, history, stepNumber)\n  const winner = calculateWinner(current.squares);\n\n  const moves = history.map((step, move) => {\n    const desc = move ? \"Go to move #\" + move : \"Go to game start\";\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{desc}</button>\n      </li>\n    );\n  });\n\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board squares={current.squares} onClick={i => handleClick(i)} />\n      </div>\n      <div className=\"game-info\">\n        <div>{status}</div>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}